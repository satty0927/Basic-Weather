{"version":3,"sources":["images/img1.jpg","images/img2.jpg","images/img3.jpg","images/img4.jpg","images/img5.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","modalDisplay","inputValue","primaryTileDisplay","weatherData","city","country","feelsLike","humidity","temperature","sunrise","sunset","weatherMain","weatherDescription","windDegree","windSpeed","getLocation","bind","e","this","setState","target","value","headers","url","axios","get","then","res","resData","JSON","parse","stringify","console","log","sys","main","feels_like","temp","name","Date","toLocaleTimeString","weather","description","wind","deg","speed","fetchWeather","pointer","cloudy","rainy","foggy","sunny","document","body","style","backgroundImage","href","rel","type","id","display","onChange","handleInput","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af0c7370.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.a3b7b9d3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.525e87f1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.675b90b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img4.6a38762d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img5.71e336aa.jpg\";","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport sunny from './images/img1.jpg';\nimport rainy from './images/img2.jpg';\nimport cloudy from './images/img3.jpg';\nimport foggy from './images/img4.jpg';\nimport thunder from './images/img5.jpg';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalDisplay: \"block\",\n      inputValue: \"\",\n      primaryTileDisplay: \"none\",\n      weatherData: {\n        city: \"\",\n        country: \"\",\n        feelsLike: \"\",\n        humidity: \"\",\n        temperature: \"\",\n        sunrise: \"\",\n        sunset: \"\",\n        weatherMain: \"\",\n        weatherDescription: \"\",\n        windDegree: \"\",\n        windSpeed: \"\"\n      }\n    }\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({ inputValue: e.target.value });\n  }\n\n  async fetchWeather() {\n    var headers = { \"x-rapidapi-key\": \"3f1cea67aemshec2b28f4251d4fbp117755jsnf6e9fc5a48b6\" };\n    var url = `https://community-open-weather-map.p.rapidapi.com/weather?q=${this.state.inputValue}&units=metric`;\n    await axios.get(url, { headers }).then((res) => {\n      var resData = JSON.parse(JSON.stringify(res[\"data\"]));\n      console.log();\n      this.setState({\n        country: resData.sys.country,\n        feelsLike: resData.main.feels_like,\n        humidity: resData.main.humidity,\n        temperature: resData.main.temp,\n        city: resData.name,\n        sunrise: new Date(resData.sys.sunrise * 1000).toLocaleTimeString(),\n        sunset: new Date(resData.sys.sunset * 1000).toLocaleTimeString(),\n        weatherMain: resData.weather[0].main,\n        weatherDescription: resData.weather[0].description,\n        windDegree: resData.wind.deg,\n        windSpeed: resData.wind.speed\n      });\n    })\n  }\n\n  async getLocation() {\n    console.log(this.state.inputValue);\n    await this.fetchWeather();\n    this.setState({ inputValue: \"\", modalDisplay: \"none\", primaryTileDisplay: \"block\" });\n  }\n\n  render() {\n    var pointer;\n    switch (this.state.weatherMain) {\n      case \"Clouds\": pointer = `url(${cloudy})`;\n        break;\n      case \"Rain\": pointer = `url(${rainy})`;\n        break;\n      case \"Haze\": pointer = `url(${foggy})`;\n        break;\n      case \"Clear\": pointer = `url(${sunny})`;\n        break;\n      default: pointer = null;\n    }\n    document.body.style.backgroundImage = pointer;\n    return (<div>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Courgette\"\n        rel=\"stylesheet\"\n        type=\"text/css\"\n      />\n      <div id=\"modal\" style={{ display: this.state.modalDisplay }}>\n        <br />\n        <span>Hi,</span>\n        <p>Wanna know what the whether is today?</p>\n        <input type=\"text\" onChange={e => this.handleInput(e)} value={this.state.inputValue}></input><br />\n        <button onClick={this.getLocation}> Let's do this! </button>\n      </div>\n      <div id=\"primaryTile\" style={{ display: this.state.primaryTileDisplay }}>\n        <span id=\"welcomeText\"\n        >Hey! Welcome to <b>{this.state.city}</b>, <b>{this.state.country}.</b></span\n        ><br />\n        <span>Today we can expect a {this.state.weatherDescription} {this.state.weatherMain} weather. And it cannot get any better!</span>\n        <p>\n          Though our officials say it a {this.state.temperature} C, but feels more like a {this.state.feelsLike} C as\n          of now!\n      <br />\n          <span>Along with a humidity of : {this.state.humidity}</span>\n        </p>\n        <p>Wind speeds at just around {this.state.windSpeed} km/ph in {this.state.windDegree} degrees of direction</p>\n        <p>\n          Sunrise is expected to be at : {this.state.sunrise}<br />\n      Sunset is expected to be at : {this.state.sunset}\n        </p>\n      </div>\n    </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}